cmake_minimum_required(VERSION 3.10)
project(websocket-server C)

# Set C standard
set(CMAKE_C_STANDARD 99)

# Add compiler warnings
if(CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -pedantic")
endif()

# Find OpenSSL package
find_package(OpenSSL REQUIRED)

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${OPENSSL_INCLUDE_DIR})

# Define library source files
set(WS_LIB_SOURCES
    src/ws/ws.c
    src/ws/utils/frames.c
    src/ws/utils/fragmentation.c
    src/ws/utils/handshake.c
    src/ws/utils/helper.c
    src/ws/utils/parse.c
    src/ws/utils/storage.c
    src/ws/utils/config.c
)

# Create WebSocket library
add_library(cws STATIC ${WS_LIB_SOURCES})
target_link_libraries(cws ${OPENSSL_LIBRARIES})

# Create example server application
add_executable(websocket-server src/main.c)
target_link_libraries(websocket-server cws ${OPENSSL_LIBRARIES})

# Installation rules
install(TARGETS cws DESTINATION lib)
install(TARGETS websocket-server DESTINATION bin)
install(FILES 
    src/ws/ws.h
    DESTINATION include/cws)
install(FILES
    src/ws/utils/frames.h
    src/ws/utils/fragmentation.h
    src/ws/utils/handshake.h
    src/ws/utils/helper.h
    src/ws/utils/parse.h
    src/ws/utils/storage.h
    src/ws/utils/config.h
    DESTINATION include/cws/utils)

# Testing (optional)
option(BUILD_TESTS "Build tests" OFF)
if(BUILD_TESTS)
    enable_testing()
    # Add test implementations here when they're created
endif()
